<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Sampling Averages Simulation</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      color: #333;
      background: #f5f5f5;
      display: flex;
      flex-direction: column;
      align-items: center;
      padding: 20px;
    }
    h1, h2 {
      text-align: center;
    }
    #controls {
      margin-bottom: 20px;
      padding: 10px;
      background: #fff;
      border: 1px solid #ddd;
      border-radius: 5px;
      width: 90%;
      max-width: 800px;
    }
    .input-group {
      display: flex;
      flex-wrap: wrap;
      align-items: center;
      margin-bottom: 10px;
    }
    .input-group label {
      flex: 1;
      min-width: 150px;
      margin-right: 10px;
    }
    .input-group input {
      flex: 2;
      padding: 5px;
      margin-right: 10px;
    }
    #controls button {
      padding: 8px 16px;
      background: #4CAF50;
      color: #fff;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }
    #controls button:hover {
      background: #45a049;
    }
    canvas {
      background: #fff;
      border: 1px solid #ccc;
      margin-top: 10px;
    }
    p {
      font-size: 14px;
    }
  </style>
</head>
<body>
  <h1>Sampling Averages Simulation</h1>
  <div id="controls">
    <div class="input-group">
      <label for="valuesInput">Values (comma-separated):</label>
      <input type="text" id="valuesInput" value="1,2,3,4,5">
    </div>
    <div class="input-group">
      <label for="probabilitiesInput">Probabilities (comma-separated):</label>
      <input type="text" id="probabilitiesInput" value="0.1,0.2,0.3,0.2,0.2">
    </div>
    <div class="input-group">
      <label for="sampleSizeN">Sample Size (n):</label>
      <input type="number" id="sampleSizeN" value="30" min="1">
      <label for="numSamplesM">Number of Samples (m):</label>
      <input type="number" id="numSamplesM" value="1000" min="1">
    </div>
    <button onclick="computeSamplingAverages()">Compute Sampling Averages</button>
  </div>

  <div>
    <h2>Distribution of Sampling Averages</h2>
    <canvas id="distributionCanvas" width="500" height="300"></canvas>
  </div>

  <p>
    Theoretical Mean: <span id="theoreticalMean"></span>,
    Theoretical Variance: <span id="theoreticalVariance"></span>
  </p>
  <p>
    Observed Mean of Sampling Averages: <span id="observedMean">0</span>,
    Observed Variance: <span id="observedVariance">0</span>
  </p>

  <script>
    // Global variables for discrete distribution
    let values = [];
    let probabilities = [];

    // Parse the user inputs and update global variables.
    function parseInputs() {
      values = document.getElementById("valuesInput").value.split(",").map(Number);
      probabilities = document.getElementById("probabilitiesInput").value.split(",").map(Number);
      
      // Check that the probabilities sum to approximately 1.
      const probSum = probabilities.reduce((acc, p) => acc + p, 0);
      if (Math.abs(probSum - 1) > 0.01) {
        alert("Probabilities must sum to 1.");
        return false;
      }
      calculateTheoreticalStats();
      return true;
    }

    // Calculate theoretical mean and variance of the parent distribution.
    function calculateTheoreticalStats() {
      let theoMean = 0;
      let theoVariance = 0;
      for (let i = 0; i < values.length; i++) {
        theoMean += values[i] * probabilities[i];
      }
      for (let i = 0; i < values.length; i++) {
        theoVariance += probabilities[i] * Math.pow(values[i] - theoMean, 2);
      }
      document.getElementById("theoreticalMean").textContent = theoMean.toFixed(2);
      document.getElementById("theoreticalVariance").textContent = theoVariance.toFixed(2);
    }

    // Canvas setup for drawing the histogram
    const distributionCanvas = document.getElementById('distributionCanvas');
    const distributionCtx = distributionCanvas.getContext('2d');

    // Generate one sample from the discrete distribution.
    function generateSample() {
      const random = Math.random();
      let cumulativeProbability = 0;
      for (let i = 0; i < probabilities.length; i++) {
        cumulativeProbability += probabilities[i];
        if (random < cumulativeProbability) {
          return values[i];
        }
      }
      // Fallback (should not happen if probabilities sum to 1)
      return values[values.length - 1];
    }

    // Main function to compute m samples each of size n,
    // compute their averages, and update the observed statistics.
    function computeSamplingAverages() {
      const n = parseInt(document.getElementById("sampleSizeN").value, 10);
      const m = parseInt(document.getElementById("numSamplesM").value, 10);

      if (!parseInputs() || n <= 0 || m <= 0) {
        alert("Please ensure all inputs are valid.");
        return;
      }

      const samplingAverages = [];
      let sumOfMeans = 0;

      // Generate m samples and compute their averages.
      for (let i = 0; i < m; i++) {
        let sampleSum = 0;
        for (let j = 0; j < n; j++) {
          sampleSum += generateSample();
        }
        const sampleMean = sampleSum / n;
        samplingAverages.push(sampleMean);
        sumOfMeans += sampleMean;
      }

      // Compute observed mean of sampling averages.
      const observedMean = sumOfMeans / m;
      // Compute observed variance of sampling averages.
      const observedVariance = samplingAverages.reduce((acc, avg) => acc + Math.pow(avg - observedMean, 2), 0) / m;

      document.getElementById("observedMean").textContent = observedMean.toFixed(2);
      document.getElementById("observedVariance").textContent = observedVariance.toFixed(2);

      // Draw the histogram of sampling averages.
      drawSamplingAveragesDistribution(samplingAverages, observedMean);
    }

    // Draw a histogram for the sampling averages and mark the observed mean.
    function drawSamplingAveragesDistribution(samplingAverages, observedMean) {
      // Clear the canvas.
      distributionCtx.clearRect(0, 0, distributionCanvas.width, distributionCanvas.height);

      const binCount = 20;
      const minValue = Math.min(...samplingAverages);
      const maxValue = Math.max(...samplingAverages);
      const binWidth = (maxValue - minValue) / binCount;
      const bins = Array(binCount).fill(0);

      // Fill the histogram bins.
      samplingAverages.forEach(avg => {
        let binIndex = Math.floor((avg - minValue) / binWidth);
        if (binIndex >= binCount) binIndex = binCount - 1;
        bins[binIndex]++;
      });

      // Draw histogram bars.
      distributionCtx.fillStyle = 'green';
      const barWidth = distributionCanvas.width / binCount;
      for (let i = 0; i < binCount; i++) {
        const barHeight = (bins[i] / samplingAverages.length) * distributionCanvas.height;
        distributionCtx.fillRect(i * barWidth, distributionCanvas.height - barHeight, barWidth - 2, barHeight);
      }

      // Draw a vertical red line for the observed mean.
      distributionCtx.strokeStyle = 'red';
      distributionCtx.lineWidth = 2;
      const meanX = ((observedMean - minValue) / (maxValue - minValue)) * distributionCanvas.width;
      distributionCtx.beginPath();
      distributionCtx.moveTo(meanX, 0);
      distributionCtx.lineTo(meanX, distributionCanvas.height);
      distributionCtx.stroke();
    }
  </script>
</body>
</html>
