<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Caesar Cipher &amp; Frequency Analysis</title>
  <style>
    body {
      font-family: sans-serif;
      margin: 20px;
      background: #f5f5f5;
      color: #333;
    }
    h1, h2 {
      color: #222;
    }
    textarea {
      width: 100%;
      height: 120px;
      padding: 10px;
      font-size: 1em;
      margin-bottom: 10px;
    }
    input[type="number"] {
      width: 60px;
      padding: 5px;
      font-size: 1em;
    }
    button {
      padding: 5px 10px;
      font-size: 1em;
      margin-left: 10px;
      cursor: pointer;
    }
    pre {
      background: #eee;
      padding: 10px;
      white-space: pre-wrap;
      word-wrap: break-word;
    }
    table {
      border-collapse: collapse;
      width: 100%;
      margin: 10px 0;
    }
    th, td {
      border: 1px solid #ccc;
      padding: 5px;
      text-align: center;
    }
    .histogram {
      display: flex;
      align-items: flex-end;
      height: 150px;
      margin: 10px 0;
      border: 1px solid #ccc;
      background: #fff;
    }
    .histogram .bar {
      flex: 1;
      margin: 0 2px;
      background: #3498db;
      position: relative;
      display: flex;
      align-items: flex-end;
      justify-content: center;
    }
    .histogram .bar span {
      font-size: 10px;
      color: #333;
      margin-bottom: 2px;
    }
    .explanation {
      background: #fff;
      border: 1px solid #ccc;
      padding: 15px;
      margin-top: 20px;
    }
  </style>
</head>
<body>
  <h1>Caesar Cipher &amp; Frequency Analysis</h1>
  <p>
    This demonstration compiles a piece of text, computes its letter frequency distribution, encrypts it using a Caesar cipher,
    and then attempts to decrypt it through frequency analysis.
  </p>

  <h2>Enter Text (Optional)</h2>
  <textarea id="input-text" placeholder="Paste your text here..."></textarea>

  <h2>Shift Value (Optional)</h2>
  <input type="number" id="shift-input" min="0" max="25" placeholder="0-25" />
  <button id="run-btn">Run Cipher</button>

  <h2>Original Text</h2>
  <pre id="original-output"></pre>
  <h2>Letter Frequency (Original Text)</h2>
  <table id="original-table"></table>
  <div id="original-histogram" class="histogram"></div>

  <h2>Encrypted Text</h2>
  <pre id="encrypted-output"></pre>
  <h2>Letter Frequency (Encrypted Text)</h2>
  <table id="encrypted-table"></table>
  <div id="encrypted-histogram" class="histogram"></div>

  <h2>Decrypted Text (via Frequency Analysis)</h2>
  <pre id="decrypted-output"></pre>

  <div class="explanation">
    <h2>Explanation</h2>
    <p>
      <strong>Letter Frequency:</strong> We calculate how often each letter (aâ€“z) appears in the text (ignoring case) and compute both
      absolute counts and relative percentages.
    </p>
    <p>
      <strong>Encryption:</strong> The Caesar cipher shifts each letter by a given amount. For example, if the shift is 5, then "a" becomes "f".
      The shifting wraps around the alphabet.
    </p>
    <p>
      <strong>Decryption:</strong> We assume that in the encrypted text the most frequent letter corresponds to "e" (the most common letter in English).
      Using this assumption, we estimate the shift used for encryption and then reverse the process.
    </p>
  </div>

  <script>
    "use strict";

    // A default sample text compiled from our own words.
    const defaultText = `Within the realm of digital secrets, every word hides a message waiting to be discovered.
Through subtle shifts in the alphabet, meaning transforms and reemerges in new forms.
This demonstration reveals the delicate balance between encryption and analysis,
showing that even simple techniques can unlock profound insights into language.`;

    /**
     * Class for handling Caesar cipher encryption and decryption.
     */
    class CaesarCipher {
      constructor(shift = 1) {
        this.shift = shift;
        this.alphabet = "abcdefghijklmnopqrstuvwxyz";
      }

      /**
       * Encrypts the given text by shifting each letter.
       * Non-letter characters remain unchanged.
       * @param {string} text The text to encrypt.
       * @returns {string} The encrypted text.
       */
      encrypt(text) {
        return text.split("").map(char => {
          const isUpper = char === char.toUpperCase();
          const lowerChar = char.toLowerCase();
          if (this.alphabet.includes(lowerChar)) {
            const idx = this.alphabet.indexOf(lowerChar);
            const newIdx = (idx + this.shift) % this.alphabet.length;
            const newChar = this.alphabet[newIdx];
            return isUpper ? newChar.toUpperCase() : newChar;
          }
          return char;
        }).join("");
      }

      /**
       * Decrypts the text using frequency analysis.
       * It assumes the most frequent letter corresponds to 'e'.
       * @param {string} text The encrypted text.
       * @returns {Object} An object with the assumed shift and the decrypted text.
       */
      decrypt(text) {
        const frequencies = computeFrequencies(text);
        // Find the letter with the highest frequency.
        const mostFrequentLetter = Object.entries(frequencies)
          .reduce((acc, cur) => (cur[1].count > acc[1].count ? cur : acc))[0];

        // Assume that this letter represents 'e' (most common in English).
        const assumedShift = (mostFrequentLetter.charCodeAt(0) - 'e'.charCodeAt(0) + 26) % 26;
        const reverseShift = (26 - assumedShift) % 26;
        const decipher = new CaesarCipher(reverseShift);
        return {
          assumedShift,
          text: decipher.encrypt(text)
        };
      }
    }

    /**
     * Computes the frequency distribution of letters (a-z) in the text.
     * Returns an object where each key is a letter with its count and relative percentage.
     * @param {string} text The text to analyze.
     * @returns {Object} Frequency distribution.
     */
    function computeFrequencies(text) {
      const alphabet = "abcdefghijklmnopqrstuvwxyz";
      const frequencies = {};
      for (const letter of alphabet) {
        frequencies[letter] = 0;
      }
      const lowerText = text.toLowerCase();
      for (const char of lowerText) {
        if (alphabet.includes(char)) {
          frequencies[char]++;
        }
      }
      const total = Object.values(frequencies).reduce((sum, count) => sum + count, 0);
      const result = {};
      for (const letter of alphabet) {
        result[letter] = {
          count: frequencies[letter],
          percentage: total > 0 ? ((frequencies[letter] / total) * 100).toFixed(2) : "0.00"
        };
      }
      return result;
    }

    /**
     * Renders a frequency table into the specified element.
     * @param {Object} frequencies Frequency distribution.
     * @param {string} elementId ID of the table element.
     */
    function renderTable(frequencies, elementId) {
      const table = document.getElementById(elementId);
      let html = "<tr><th>Letter</th><th>Count</th><th>Percentage</th></tr>";
      // Sort letters in descending order of count.
      const sorted = Object.entries(frequencies).sort((a, b) => b[1].count - a[1].count);
      for (const [letter, data] of sorted) {
        if (data.count > 0) {
          html += `<tr>
            <td>${letter}</td>
            <td>${data.count}</td>
            <td>${data.percentage}%</td>
          </tr>`;
        }
      }
      table.innerHTML = html;
    }

    /**
     * Renders a simple histogram for letter frequencies.
     * @param {Object} frequencies Frequency distribution.
     * @param {string} containerId ID of the histogram container.
     */
    function renderHistogram(frequencies, containerId) {
      const container = document.getElementById(containerId);
      container.innerHTML = "";
      const maxCount = Math.max(...Object.values(frequencies).map(f => f.count)) || 1;
      for (const letter of "abcdefghijklmnopqrstuvwxyz") {
        const data = frequencies[letter] || { count: 0 };
        const barHeight = (data.count / maxCount) * 100;
        const bar = document.createElement("div");
        bar.className = "bar";
        bar.style.height = `${barHeight}%`;
        // Add a label for the letter.
        const label = document.createElement("span");
        label.textContent = letter;
        bar.appendChild(label);
        container.appendChild(bar);
      }
    }

    /**
     * Main function to process the text: compute frequencies, encrypt, and decrypt.
     */
    function processText() {
      const userText = document.getElementById("input-text").value.trim();
      const text = userText || defaultText;
      document.getElementById("original-output").textContent = text;

      // Compute and display original frequency distribution.
      const originalFrequencies = computeFrequencies(text);
      renderTable(originalFrequencies, "original-table");
      renderHistogram(originalFrequencies, "original-histogram");

      // Retrieve or generate a shift value.
      let shift = parseInt(document.getElementById("shift-input").value, 10);
      if (isNaN(shift) || shift < 0 || shift > 25) {
        shift = Math.floor(Math.random() * 25) + 1;
      }
      shift = shift % 26;

      // Encrypt the text.
      const cipher = new CaesarCipher(shift);
      const encryptedText = cipher.encrypt(text);
      document.getElementById("encrypted-output").textContent = `Shift used: ${shift}\n` + encryptedText;
      const encryptedFrequencies = computeFrequencies(encryptedText);
      renderTable(encryptedFrequencies, "encrypted-table");
      renderHistogram(encryptedFrequencies, "encrypted-histogram");

      // Decrypt the text using frequency analysis.
      const decryption = cipher.decrypt(encryptedText);
      document.getElementById("decrypted-output").textContent =
        `Assumed shift (via frequency analysis): ${decryption.assumedShift}\n` + decryption.text;
    }

    // Run the cipher when the button is clicked.
    document.getElementById("run-btn").addEventListener("click", processText);

    // Process default text on page load.
    processText();
  </script>
</body>
</html>
